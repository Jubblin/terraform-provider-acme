// Code generated by go-bindata.
// sources:
// templates/dns-provider-doc-template.tmpl
// templates/dns-provider-go-template.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDnsProviderDocTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x61\x6b\xe3\x38\x14\xfc\xae\x5f\x31\xa4\x85\xdb\x0d\xb1\xf3\xbd\xb0\x07\x21\xd7\x85\xc2\xde\x52\xb6\x7b\xf7\x25\x84\x5a\x91\x9f\x6d\x51\x59\x32\x92\x9c\x6e\x30\xfe\xef\xc7\x73\x1a\xbb\xc9\x1d\xdd\xde\xc1\x7d\x4a\x6c\x3d\x3d\xcd\xcc\x9b\x91\x93\x5f\xf1\xbd\x22\x14\xce\x18\xf7\xac\x6d\x89\xdc\xa9\xb6\x26\x1b\x65\xd4\xce\x42\x07\xc8\x36\xba\xa4\x24\x4b\x5e\x46\xca\x51\x78\x57\x23\x56\x84\xd5\xfa\xf7\x5b\xd1\x78\xb7\xd7\x39\xf9\x5f\x02\x56\xf7\x77\x30\x7a\xe7\xa5\x3f\x60\x63\xa8\x74\xdb\x0f\x55\x8c\x4d\xb8\x59\x2e\x4b\x97\x48\x55\x53\x5a\xea\x58\xb5\xbb\x54\xbb\x25\xaf\x2f\x3f\xa6\xc0\x83\xab\x49\x04\x52\x7c\x5a\x40\x2d\x0f\xf0\x54\x90\x47\x74\xe0\x1a\xe4\xda\x93\x8a\xe6\x80\x04\xda\xa2\x76\x21\x42\xc9\x40\x61\xc1\x18\x02\xe1\xb4\x55\xc8\xa6\x31\x07\xde\xc6\xd8\xbe\x93\xf7\xb2\x70\xbe\xc6\x09\x20\x64\xc0\x33\x19\x93\x0a\x71\x85\xae\x4b\xbf\xca\x9a\xfa\x1e\xbf\x7d\x7d\xc0\xba\x92\xc6\x90\x2d\x09\xf7\x2f\xc5\x42\xb0\x26\x59\xd7\xa5\x6b\x97\x53\xdf\x67\x43\x9d\x1a\xeb\xc6\xa6\x4a\x5a\xec\x08\x6d\xa0\x9c\x8f\x6e\xc8\x0f\x87\x9e\x55\x07\x14\xce\x0b\x46\xb5\xc9\x58\x85\x47\x45\x3e\xea\x42\x2b\x19\x29\xdb\x6e\x3c\x05\xd7\x7a\x45\x83\x42\xc9\xab\xb5\x2d\x4e\x4b\x78\xd6\xb1\x12\x5d\xa7\x0b\xa4\x7f\x7c\xfb\xd2\xf7\x9b\x91\xc0\xf6\x43\xd7\x1d\xdf\x7d\xec\x3a\x32\x81\xfa\x7e\x5c\xeb\xba\x04\x64\xf3\xbe\x4f\x85\x78\xe3\x98\x1b\x2c\x73\xa7\xc2\xf2\x44\x2a\x2c\xb9\x64\xe9\x97\xaf\x8a\xd2\x2a\xd6\x46\x88\xcf\xce\x43\xb9\xba\x31\x14\x09\xda\x32\xd7\xa3\x4d\x9c\x45\xe5\x9e\x59\x82\x36\x10\x62\xa5\xc3\xa4\x11\x83\x1f\x86\x72\xc6\x9e\xc9\x8b\x13\xa8\x05\x02\x11\x36\x15\x79\x7a\x43\x90\x24\xb7\x21\x99\x64\xdd\xbe\x49\xeb\xb2\xf8\xdd\x2c\xaf\xda\xa0\x6d\x79\xb1\x5d\x88\xab\x2b\xdc\xfe\x90\x4c\x5d\x88\x2c\xcb\x2a\x65\x46\xf4\x98\x5d\x8e\x75\x86\xd9\xd9\x53\x27\x80\x34\x4d\x85\x00\x72\x1b\x1e\x27\x23\xf1\x02\x26\xa9\x3e\x61\x36\x7a\x6e\x26\x80\x5e\xf4\x7c\x98\x10\x3c\x4a\x9e\xfe\xda\xd9\x42\x97\xad\x1f\x54\x4f\xef\x3d\x05\xb2\xb1\xef\x19\xdd\xca\x97\x43\x6e\xf1\x8d\xf3\x43\x56\xd1\xd1\xc5\x53\xb2\xe5\x4b\x45\x38\xd9\x96\x74\xac\xc8\xa3\x91\x81\xfd\x2b\x03\xc8\xee\xb5\x77\x76\x68\xb3\x97\x5e\xcb\x9d\xe1\xa4\x39\x2f\xc6\x18\xc6\xca\xbb\xb6\x7c\x19\xa8\x1a\xe0\x64\xd8\x19\xa7\x9e\x38\x9f\xb1\x22\xb1\xc9\xce\x38\xbe\x65\xf1\x73\x95\x13\xe9\xcb\xed\x88\x72\x6a\xf7\xdf\x42\x93\x82\xdd\x5a\x3b\x4f\xc8\x29\x4a\x6d\xc2\xe0\x32\xf1\x3f\xba\x6c\x20\xf0\x7e\xa3\x9d\xc9\x24\xc4\x9d\x85\xcc\x73\xcd\x93\x5d\x5c\xcc\x4a\x9a\xe0\x78\x60\x21\x3a\x4f\x39\x2b\x23\x61\x9c\x92\x06\x85\x36\xb4\x98\x22\xd6\xc8\x58\x89\xd0\x36\x8d\xd1\x94\x63\x77\xc0\xf0\xff\xc0\xd3\xe7\xe5\x51\xdb\x29\x93\x8f\x9f\xef\xbe\xdc\x66\x08\x6d\x51\xe8\x1f\x29\x1e\x26\x85\xfe\xc6\x95\xcf\x62\x8a\x09\x1d\x83\xb0\xe5\x8b\xed\xa8\xf0\xab\xbb\x80\xf5\xfa\xf9\xd6\x7f\x1b\xc7\x93\x1b\x87\x4e\x21\x29\x9c\x4f\x4e\x5b\x93\x51\x2b\xd1\x75\x5e\x72\xac\xae\x9f\x16\xb8\xde\xe3\xe6\xd3\x65\x62\xd6\x9e\x72\xb2\x51\x4b\x13\xfa\x5e\xcc\xf9\x8a\xbf\x7e\xe2\xfb\x3d\x41\xd7\x5d\xef\xf9\xaa\x1c\x6f\xcd\x9f\x77\x5b\xbd\x8c\x4b\x9a\xf7\x34\xe3\xfc\xde\xda\xfd\x9f\xd2\xaf\x8c\xe6\x4f\x58\xdf\x5f\x04\x74\x8c\x1c\xa4\x27\xcc\xe7\xe3\x57\x2c\x09\x0d\x29\x56\x65\x3e\x87\x3c\x6e\x1e\xb4\x1f\x66\xba\x73\x7b\x12\xea\x35\x30\xec\xa5\x69\x29\xdc\x88\x7f\xa2\x70\x09\xe1\x0c\xf7\xd0\x7c\x68\x9d\x1d\x29\x64\xe7\x1c\x4e\xbf\xd3\x9b\x73\x11\xfe\x0a\x00\x00\xff\xff\x63\x56\xd6\x23\x4e\x08\x00\x00")

func templatesDnsProviderDocTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderDocTemplateTmpl,
		"templates/dns-provider-doc-template.tmpl",
	)
}

func templatesDnsProviderDocTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderDocTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-doc-template.tmpl", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1606430661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDnsProviderGoTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfa\x14\xd3\x10\xa8\x03\x59\xf9\xbe\x90\x43\xd8\x64\x7b\x6a\x08\x2c\xe4\x52\x7a\x98\xb5\xc6\x8e\xb0\x3c\x32\x92\xec\x12\x8c\xbe\x7b\x91\x13\xbb\xe9\x9f\x94\x3d\xd9\x33\xd2\x7b\xf3\x7b\xf6\xe4\x39\x6c\xbb\x60\x9f\x2a\x62\x72\x18\x48\x41\xa9\x0d\x49\xd8\x59\x60\x1b\x80\x94\x0e\x52\xb4\x58\xd4\x58\x11\x60\xd1\x90\x10\xba\x69\xad\x0b\x90\x89\xc5\x30\x2c\xe5\xb1\xae\x8e\x18\xce\x31\xe6\xc5\x19\x8d\x21\xae\x68\x21\x86\xe1\x09\x1c\x72\x45\x20\x8f\xce\xf6\x5a\x91\xf3\x31\xfe\x29\x68\xa7\xa3\x5c\xb1\xcf\x87\x41\x7e\xb1\xc7\xba\x8a\xf1\xaa\x27\x56\x31\x8a\x95\x10\x79\x0e\x8a\xfd\xe4\xf3\x8a\x45\xb0\xee\xf2\xda\x71\x01\xda\x03\x42\xd9\x71\x11\xb4\x65\x08\x67\x0c\x50\xa0\x31\xa9\x3b\x79\x7f\xf6\x49\x5f\x58\xf6\xc1\x75\x49\x09\xc8\x0a\x1c\x85\xce\xb1\x87\x70\xa6\xf9\x26\x68\x0e\xe4\x4a\x2c\x48\x8a\x70\x69\xe9\xd1\xd0\x34\x2f\x5b\x41\x36\xc7\x9d\x23\xae\x81\x9c\xb3\xee\x11\xf2\x0d\xf7\x56\x94\x09\xc5\x18\xb0\xe5\x48\xd1\xa3\xd1\x0a\x76\x87\xb7\x99\x67\x04\xf7\x5d\x9b\x3e\x36\x29\x78\xbf\xc0\xf6\xe5\xeb\x7e\x3e\x96\xa2\x47\xf7\xaf\x29\x1b\x68\xb0\xfd\xe6\x83\xd3\x5c\x7d\x7f\x90\x61\xf8\xcf\x1f\x92\x2f\x56\x51\x8c\x8b\xe7\x0f\x24\xbd\x19\xe9\x12\xe4\x9e\xfb\x13\xba\xad\xd1\xe8\x29\x39\x35\xd8\xee\xb9\xd7\xce\x72\x43\x1c\x4e\xe8\x34\xbe\x1b\x3a\xa1\xe9\xc8\x67\x77\x84\xd7\xc7\x3d\xd0\xb2\x5e\xc3\xb2\x87\xe7\xcd\xdf\xa6\x69\x81\xea\x91\x2d\xbd\xf5\x31\x2e\xd6\x77\xbb\x12\x57\x77\x45\x3b\x32\x26\x97\x5f\x8b\x25\x0f\xf4\x63\x77\x78\x9b\x52\x64\x2b\xa1\xcb\xf1\xd6\xa7\x0d\xb0\x36\x30\x88\xeb\x62\xa4\x62\x94\x8b\x28\xa6\x56\xbb\x4e\x5d\x11\x7f\x1b\x28\x7e\x06\x00\x00\xff\xff\x8a\x29\xdb\x58\x3f\x03\x00\x00")

func templatesDnsProviderGoTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderGoTemplateTmpl,
		"templates/dns-provider-go-template.tmpl",
	)
}

func templatesDnsProviderGoTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderGoTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-go-template.tmpl", size: 831, mode: os.FileMode(420), modTime: time.Unix(1601656654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dns-provider-doc-template.tmpl": templatesDnsProviderDocTemplateTmpl,
	"templates/dns-provider-go-template.tmpl": templatesDnsProviderGoTemplateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dns-provider-doc-template.tmpl": &bintree{templatesDnsProviderDocTemplateTmpl, map[string]*bintree{}},
		"dns-provider-go-template.tmpl": &bintree{templatesDnsProviderGoTemplateTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

