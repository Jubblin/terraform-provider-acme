// Code generated by go-bindata.
// sources:
// templates/dns-provider-doc-template.tmpl
// templates/dns-provider-go-template.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDnsProviderDocTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6b\xdb\x48\x14\x7d\x9f\x5f\x71\x70\x02\xdb\x1a\x4b\x7e\x37\x74\xc1\x78\x53\x08\x74\x4b\x68\xba\xfb\x62\x4c\x34\x96\xae\xa4\x21\xa3\x19\x31\x33\x72\x6a\x84\xfe\xfb\x72\xe5\x58\x8a\xdc\xae\xbb\x2c\xf4\xc9\x96\xe6\x7e\x9c\x73\xee\x3d\xa3\x28\x8a\x44\x2d\x0b\x7a\x0a\x2a\x68\x5a\x61\xd6\xb6\xf1\xc6\x66\xd4\x75\x33\xe1\x9b\x7d\x2a\x03\x15\xd6\x1d\x57\x98\xfd\xf1\xf9\x11\x0f\xce\x1e\x54\x46\xce\xcf\x04\x27\x8a\xe8\x77\x7c\x2d\x09\xb9\xd5\xda\xbe\x28\x53\x20\xb3\x69\x53\x91\x09\x32\x28\x6b\xa0\x3c\x64\x13\x6c\x54\x90\x21\x27\x03\x65\xc8\x9d\xad\x10\x4a\xc2\x7a\xf3\xe7\x9d\xa8\x5f\xcb\xfd\xe6\xb1\x7e\xb8\x87\x56\x7b\x27\xdd\x11\x5b\x4d\x85\xdd\xbd\x2b\x43\xa8\xfd\x6a\xb9\x2c\x6c\x24\xd3\x8a\xe2\x42\x85\xb2\xd9\xc7\xca\x2e\xf9\x7c\xf9\x3e\x06\x1e\x6d\x45\xc2\x53\xca\xdd\x3c\x2a\x79\x84\xa3\x9c\x1c\x82\x05\xc7\x20\x53\x8e\xd2\xa0\x8f\x88\xa0\x0c\x2a\xeb\x03\x52\xe9\xc9\x2f\x18\x83\x27\x9c\x53\x85\xac\x6b\x7d\xe4\x34\xc6\xf6\x95\x9c\x93\xb9\x75\x15\xce\x00\x21\x3d\x5e\x48\xeb\x58\x88\x1b\xb4\x6d\xfc\x59\x56\xd4\x75\x60\x49\x36\xa5\xd4\x9a\x4c\x41\x83\x38\x42\xb0\x26\xc9\x20\x64\xd2\xc7\xa5\x43\xdc\x50\x34\x95\x06\x7b\x42\xe3\x29\xe3\xd6\x35\xb9\xbe\xe9\x24\xda\x23\xb7\x4e\x30\xaa\x6d\xc2\x2a\x3c\xa5\xe4\x82\xca\x15\x0f\x26\xd9\x6d\x1d\x79\xdb\xb8\x94\x7a\x85\xa2\x37\x67\x3b\x9c\x8f\xf0\xa2\x42\x29\xda\x56\xe5\x88\xff\xfa\xf2\xa9\xeb\xb6\x03\x81\xdd\xbb\xb6\x3d\xbd\x7b\xdf\xb6\xa4\x3d\x75\xdd\x70\xd6\xb6\x11\xc8\x64\x5d\x17\x0b\x71\xa5\xcd\x0a\xf1\xf2\xcd\x73\x5c\x65\x42\x7c\xb4\x0e\xa9\xad\x6a\x4d\x81\xa0\x0c\x93\x3a\xed\x83\x35\x28\xed\x0b\x73\x6d\x3c\x21\x94\xca\x8f\x62\x30\xca\x5e\xfd\x09\x4d\x66\x29\xce\xdd\x17\xf0\x44\xd8\x96\xe4\xe8\x0a\xf3\x28\x33\x3e\x1a\xf5\xdb\x5d\xc5\x7f\x19\xfc\x3d\x9d\x9b\xc6\x2b\x53\x5c\xc4\x09\x71\x73\x83\xbb\x6f\x92\x39\x0a\x91\x24\x49\x99\xea\x01\x26\x66\x97\x83\x9a\x61\x36\x79\x6a\x05\x10\xc7\xb1\x10\x40\x66\xfc\xd3\xb8\x1a\x7c\x80\x51\x93\x0f\x13\x3b\x02\x9d\xe8\xb8\x99\x10\x3c\x1c\x9e\xe7\xc6\x9a\x5c\x15\x8d\xeb\xe5\x8d\x1f\x1c\x79\x32\xa1\xeb\x18\xdd\xda\x15\xbd\x13\xf1\x85\x1d\x41\x26\xa5\xd3\x5e\x8e\x5e\x95\xaf\x11\xfe\xbc\x88\xa4\x42\x49\x0e\xb5\xf4\xbc\x91\xd2\x83\xcc\x41\x39\x6b\xfa\x32\x07\xe9\x94\xdc\x6b\xf6\x8e\x75\x62\x30\x56\x28\x9d\x6d\x8a\xd7\xc9\xa5\x3d\x9c\x04\x7b\x6d\xd3\x67\x76\x5c\x28\x49\x6c\x93\x09\xc7\x6b\x4b\x3b\x55\x39\x92\xae\xd8\x0d\x28\xc7\x72\xff\xcf\x06\x31\x78\x2d\x2b\xeb\x08\x19\x05\xa9\xb4\xef\xd7\x49\xfc\xc2\x75\xea\x09\xfc\x60\xa3\x26\x7a\x08\x71\x6f\x20\xb3\x4c\xf1\x08\x17\x17\x43\x91\xda\x5b\x9e\x8c\x0f\xd6\x51\xc6\x12\x48\x68\x9b\x4a\x8d\x5c\x69\x5a\x8c\xa6\xa9\x65\x28\x85\x6f\xea\x5a\x2b\xca\xb0\x3f\xa2\xff\x7f\xe4\x31\xf3\xf1\x20\xe2\xe8\xb2\xa7\x8f\xf7\x9f\xee\x12\xf8\x26\xcf\xd5\xb7\x18\x8f\xa3\x14\xdf\x91\xe2\x5e\xcc\x25\xa2\xd3\xc6\xef\xf8\x4e\x3a\x49\xf9\xc6\xdd\x2c\xcc\xcf\x53\xff\xd5\x60\xe7\xfd\xea\x53\x7c\x94\x5b\x17\x9d\x7d\x10\x0d\xa2\x88\xb6\x75\x92\x8d\x72\xfb\xbc\xc0\xed\x01\xab\x0f\x97\x1e\xd8\x38\xca\xc8\x04\x25\xb5\xef\x3a\x31\xe7\x6b\xf8\xf6\x99\xef\xe0\x08\x6d\x7b\x7b\xe0\xeb\x6c\xb8\xd9\x7e\x5e\x6d\xfd\x3a\x17\xa9\xff\x4b\x31\x76\xe4\x9d\x39\xfc\x2d\xdd\x5a\x2b\xfe\xcc\x74\xdd\x85\xe5\x06\x13\x41\x3a\xc2\x7c\x3e\x7c\x69\x22\x5f\x53\xca\x9a\xcc\xe7\x90\xa7\xe4\x5e\xe4\x7e\x78\x7b\x7b\x20\x91\xbe\x05\x86\x83\xd4\x0d\xf9\x95\xf8\x11\x85\x4b\x08\x13\xdc\x7d\xf1\xbe\x74\x72\xa2\x90\x4c\x39\x9c\x7f\xc7\x37\x53\x11\xfe\x09\x00\x00\xff\xff\x8f\x2b\x1e\x2c\x30\x08\x00\x00")

func templatesDnsProviderDocTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderDocTemplateTmpl,
		"templates/dns-provider-doc-template.tmpl",
	)
}

func templatesDnsProviderDocTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderDocTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-doc-template.tmpl", size: 2096, mode: os.FileMode(420), modTime: time.Unix(1606760496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDnsProviderGoTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfa\x14\xd3\x10\xa8\x03\x59\xf9\xbe\x90\x43\xd8\x64\x7b\x6a\x08\x2c\xe4\x52\x7a\x98\xb5\xc6\x8e\xb0\x3c\x32\x92\xec\x12\x8c\xbe\x7b\x91\x13\xbb\xe9\x9f\x94\x3d\xd9\x33\xd2\x7b\xf3\x7b\xf6\xe4\x39\x6c\xbb\x60\x9f\x2a\x62\x72\x18\x48\x41\xa9\x0d\x49\xd8\x59\x60\x1b\x80\x94\x0e\x52\xb4\x58\xd4\x58\x11\x60\xd1\x90\x10\xba\x69\xad\x0b\x90\x89\xc5\x30\x2c\xe5\xb1\xae\x8e\x18\xce\x31\xe6\xc5\x19\x8d\x21\xae\x68\x21\x86\xe1\x09\x1c\x72\x45\x20\x8f\xce\xf6\x5a\x91\xf3\x31\xfe\x29\x68\xa7\xa3\x5c\xb1\xcf\x87\x41\x7e\xb1\xc7\xba\x8a\xf1\xaa\x27\x56\x31\x8a\x95\x10\x79\x0e\x8a\xfd\xe4\xf3\x8a\x45\xb0\xee\xf2\xda\x71\x01\xda\x03\x42\xd9\x71\x11\xb4\x65\x08\x67\x0c\x50\xa0\x31\xa9\x3b\x79\x7f\xf6\x49\x5f\x58\xf6\xc1\x75\x49\x09\xc8\x0a\x1c\x85\xce\xb1\x87\x70\xa6\xf9\x26\x68\x0e\xe4\x4a\x2c\x48\x8a\x70\x69\xe9\xd1\xd0\x34\x2f\x5b\x41\x36\xc7\x9d\x23\xae\x81\x9c\xb3\xee\x11\xf2\x0d\xf7\x56\x94\x09\xc5\x18\xb0\xe5\x48\xd1\xa3\xd1\x0a\x76\x87\xb7\x99\x67\x04\xf7\x5d\x9b\x3e\x36\x29\x78\xbf\xc0\xf6\xe5\xeb\x7e\x3e\x96\xa2\x47\xf7\xaf\x29\x1b\x68\xb0\xfd\xe6\x83\xd3\x5c\x7d\x7f\x90\x61\xf8\xcf\x1f\x92\x2f\x56\x51\x8c\x8b\xe7\x0f\x24\xbd\x19\xe9\x12\xe4\x9e\xfb\x13\xba\xad\xd1\xe8\x29\x39\x35\xd8\xee\xb9\xd7\xce\x72\x43\x1c\x4e\xe8\x34\xbe\x1b\x3a\xa1\xe9\xc8\x67\x77\x84\xd7\xc7\x3d\xd0\xb2\x5e\xc3\xb2\x87\xe7\xcd\xdf\xa6\x69\x81\xea\x91\x2d\xbd\xf5\x31\x2e\xd6\x77\xbb\x12\x57\x77\x45\x3b\x32\x26\x97\x5f\x8b\x25\x0f\xf4\x63\x77\x78\x9b\x52\x64\x2b\xa1\xcb\xf1\xd6\xa7\x0d\xb0\x36\x30\x88\xeb\x62\xa4\x62\x94\x8b\x28\xa6\x56\xbb\x4e\x5d\x11\x7f\x1b\x28\x7e\x06\x00\x00\xff\xff\x8a\x29\xdb\x58\x3f\x03\x00\x00")

func templatesDnsProviderGoTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderGoTemplateTmpl,
		"templates/dns-provider-go-template.tmpl",
	)
}

func templatesDnsProviderGoTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderGoTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-go-template.tmpl", size: 831, mode: os.FileMode(420), modTime: time.Unix(1601656654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dns-provider-doc-template.tmpl": templatesDnsProviderDocTemplateTmpl,
	"templates/dns-provider-go-template.tmpl": templatesDnsProviderGoTemplateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dns-provider-doc-template.tmpl": &bintree{templatesDnsProviderDocTemplateTmpl, map[string]*bintree{}},
		"dns-provider-go-template.tmpl": &bintree{templatesDnsProviderGoTemplateTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

